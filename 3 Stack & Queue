/*
  3.1
  Three in one: Describe how you could use a single array to implement three stacks
*/
// 1
// Use one array and use indexes to place stack elements. (currentInd1,2,3 etc)
// First stack item will be 0, second at 1, third at 3 and then repeat every 3 elements

//-----------------------------------------------------------------------------------------

/*
  3.2
  Stack Min: 
  How would you design a stack which, in addition to push and pop, has a function min that 
  returns the minimum element? Push, pop and min should operate in O(1) time
*/
// 1
// Store min in a variable inside and check for a new min on a push
// (can't know min after pop()) 

// 2
// Store array of mins inside, push there elements that are min on each state

//-----------------------------------------------------------------------------------------

/*
  3.3
  Stack of plates: Imagine a stack of plates. If the stack gets too high, it might topple.
  Therefore, in real life, we would likely start a new stack when the previous stack exceeds some
  threshold. Implement a data structure setOfStacks that mimics this. setOfStacks must be composed
  of several stacks and could create a new stack once the previous one exceeds the capacity.
  setOfStacks.push() and setOfStacks.pop() should behave identically to a single stack
*/

// Use one array and control current amount of elements and locations with index pointers
// Or use previous approach (with pointers on 1,2,3 jump to each 3rd element representing stack)

//-----------------------------------------------------------------------------------------
/*
  Queue via Stacks: Implement a queue using stacks
*/

// 1
// Use two stacks and on each pop():
//  - Put all elements into a second stack and return one on top
//  - Then return all the elements into a first stack back

// 2
// ?

//-----------------------------------------------------------------------------------------
/*
  Sort Stacks: Write a program to sort a stack such that the smallest item is on the top.You can use
  an additional temporary stack but you may not copy the elements into any other data structure.
  The stack supports the following operations : push, pop, peek and isEmpty
*/

// 1
// Taking one item from a stack - 'a'
// Then do a variation of insertion sort:
// Pop out elements to find a right place for 'a'
// Keep elements in another stack meanwhile 



